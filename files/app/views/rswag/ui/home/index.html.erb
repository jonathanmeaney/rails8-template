<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Swagger UI</title>
  <link href="https://fonts.googleapis.com/css?family=Open+Sans:400,700|Source+Code+Pro:300,600|Titillium+Web:400,600,700" rel="stylesheet">
  <link rel="stylesheet" type="text/css" href="./swagger-ui.css" >
  <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
  <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
  <style>
    html {
      box-sizing: border-box;
      overflow: -moz-scrollbars-vertical;
      overflow-y: scroll;
    }
    *,
    *:before,
    *:after {
      box-sizing: inherit;
    }
    body {
      margin:0;
      background: #fafafa;
    }
  </style>
</head>
<body>

<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="position:absolute;width:0;height:0">
  <defs> ... </defs>
</svg>

<div id="swagger-ui"></div>

<script>
  if (window.navigator.userAgent.indexOf("Edge") > -1) {
    console.log("Removing native Edge fetch in favor of swagger-ui's polyfill");
    window.fetch = undefined;
  }
</script>

<script src="./swagger-ui-bundle.js"> </script>
<script src="./swagger-ui-standalone-preset.js"> </script>
<script>
  window.onload = function () {
    var configObject = JSON.parse('<%= config_object.to_json %>');
    var oauthConfigObject = JSON.parse('<%= oauth_config_object.to_json %>');

    // Apply mandatory parameters
    configObject.dom_id = "#swagger-ui";
    configObject.presets = [SwaggerUIBundle.presets.apis, SwaggerUIStandalonePreset];
    configObject.layout = "StandaloneLayout";

    // Add interceptors for JWT handling
    configObject.requestInterceptor = function(req) {
      const token = window.localStorage.getItem('authorization');
      if (token) {
        req.headers['Authorization'] = token;
      }
      return req;
    };

    configObject.responseInterceptor = async function(res) {
      if (res.ok && res.url.endsWith('/api/login')) {
        try {
          window.localStorage.setItem('authorization', res.headers.authorization);
        } catch (e) {
          console.error(e);
        }
      }
      return res;
    };

    // If oauth2RedirectUrl isn't specified, use the built-in default
    if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
      configObject.oauth2RedirectUrl = window.location.href.replace("index.html", "oauth2-redirect.html");

    // Build a system
    const ui = SwaggerUIBundle(configObject);

    // Apply OAuth config
    ui.initOAuth(oauthConfigObject);
  }
</script>
</body>
</html>
