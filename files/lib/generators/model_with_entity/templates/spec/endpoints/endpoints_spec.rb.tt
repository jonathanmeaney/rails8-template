require 'rails_helper'

RSpec.describe Endpoints::<%= plural_class_name %>, type: :request do
  let(:user) { build_stubbed(:user) }
  let(:attrs)      { attributes_for(:<%= file_name %>).except(:id, :lock_version) }

  let(:record1)    { build_stubbed(:<%= file_name %>, attrs.merge(id: 1)) }
  let(:record2)    { build_stubbed(:<%= file_name %>, attrs.merge(id: 2)) }
  let(:records)    { [ record1, record2 ] }
  let(:new_record) { build_stubbed(:<%= file_name %>, attrs.merge(id: 3)) }
  let(:id)         { record1.id }
  let(:valid_attrs) { attrs }
  let(:update_attrs) { updated_attrs(valid_attrs) }

  context 'when unauthorized' do
    it 'returns 401 for GET /api/<%= plural_file_name %>' do
      get '/api/<%= plural_file_name %>', headers: auth_headers
      expect(response).to have_http_status(:unauthorized)
      expect(JSON.parse(response.body)['error']).to be_present
    end

    it 'returns 401 for GET /api/<%= plural_file_name %>/:id' do
      get "/api/<%= plural_file_name %>/#{id}", headers: auth_headers
      expect(response).to have_http_status(:unauthorized)
      expect(JSON.parse(response.body)['error']).to be_present
    end

    it 'returns 401 for POST /api/<%= plural_file_name %>' do
      post '/api/<%= plural_file_name %>', params: valid_attrs.to_json, headers: auth_headers
      expect(response).to have_http_status(:unauthorized)
      expect(JSON.parse(response.body)['error']).to be_present
    end

    it 'returns 401 for PUT /api/<%= plural_file_name %>/:id' do
      put "/api/<%= plural_file_name %>/#{id}", params: update_attrs.merge(lock_version: record1.lock_version).to_json, headers: auth_headers
      expect(response).to have_http_status(:unauthorized)
      expect(JSON.parse(response.body)['error']).to be_present
    end

    it 'returns 401 for DELETE /api/<%= plural_file_name %>/:id' do
      delete "/api/<%= plural_file_name %>/#{id}", params: { lock_version: record1.lock_version }.to_json, headers: auth_headers
      expect(response).to have_http_status(:unauthorized)
      expect(JSON.parse(response.body)['error']).to be_present
    end
  end

  context 'when authorized' do
    before do
      sign_in_as(user)
      # Stub model class methods
      allow(<%= class_name %>).to receive(:all).and_return(records)
      allow(<%= class_name %>).to receive(:find).with(id).and_return(record1)
      allow(<%= class_name %>).to receive(:new).with(valid_attrs).and_return(new_record)

      # Stub instance methods
      allow(new_record).to receive(:save).and_return(true)
      allow(record1).to receive(:update).and_return true
      allow(record1).to receive(:update) do |attrs|
        record1.assign_attributes(attrs)
        true
      end
      allow(record1).to receive(:destroy!).and_return(true)
    end

    describe 'GET /api/<%= plural_file_name %>' do
      it 'returns all records' do
        get '/api/<%= plural_file_name %>', headers: auth_headers

        expect(response).to have_http_status(:ok)
        json = JSON.parse(response.body)
        expect(json.size).to eq(records.size)
      end
    end

    describe 'GET /api/<%= plural_file_name %>/:id' do
      it 'returns the record' do
        get "/api/<%= plural_file_name %>/#{id}", headers: auth_headers

        expect(response).to have_http_status(:ok)
        json = JSON.parse(response.body)
        expect(json['id']).to eq(id)
      end

      it 'returns 404 if not found' do
        allow(<%= class_name %>).to receive(:find).with(999).and_raise(ActiveRecord::RecordNotFound)

        get '/api/<%= plural_file_name %>/999', headers: auth_headers

        expect(response).to have_http_status(:not_found)
        json = JSON.parse(response.body)
        expect(json['error']).to be_present
      end
    end

    describe 'POST /api/<%= plural_file_name %>' do
      it 'creates a record' do
        expect(<%= class_name %>).to receive(:new).with(valid_attrs)
        expect(new_record).to receive(:save).and_return(true)

        post '/api/<%= plural_file_name %>', params: valid_attrs, headers: auth_headers

        expect(response).to have_http_status(:created)
        json = JSON.parse(response.body)
        expect(json['id']).to eq(new_record.id)
      end

      it 'returns 422 on validation failure' do
        allow(new_record).to receive(:save).and_return(false)
        allow(new_record).to receive_message_chain(:errors, :full_messages).and_return([ "Invalid" ])

        post '/api/<%= plural_file_name %>', params: valid_attrs, headers: auth_headers

        expect(response).to have_http_status(:unprocessable_content)
        json = JSON.parse(response.body)
        expect(json['errors']).to include("Invalid")
      end
    end

    describe 'PUT /api/<%= plural_file_name %>/:id' do
      let(:locked_params) { update_attrs.merge(lock_version: record1.lock_version) }

      it 'updates the record' do
        expect(record1).to receive(:update).with(hash_including(update_attrs))

        put "/api/<%= plural_file_name %>/#{id}", params: locked_params, headers: auth_headers

        expect(response).to have_http_status(:ok)
        json = JSON.parse(response.body)

        update_attrs.each do |k, v|
          expect(json[k.to_s]).to eq(v)
        end
      end

      it 'returns 409 on stale lock' do
        allow(record1).to receive(:update).and_raise(ActiveRecord::StaleObjectError.new(record1, :update))

        put "/api/<%= plural_file_name %>/#{id}", params: locked_params, headers: auth_headers

        expect(response).to have_http_status(:conflict)
        json = JSON.parse(response.body)
        expect(json['error']).to match(/Conflict/)
      end
    end

    describe 'DELETE /api/<%= plural_file_name %>/:id' do
      it 'deletes the record' do
        expect(record1).to receive(:destroy!).once

        delete "/api/<%= plural_file_name %>/#{id}", params: { lock_version: record1.lock_version }, headers: auth_headers

        expect(response).to have_http_status(:no_content)
      end

      it 'returns 409 on stale lock' do
        allow(record1).to receive(:destroy!).and_raise(ActiveRecord::StaleObjectError.new(record1, :destroy))

        delete "/api/<%= plural_file_name %>/#{id}", params: { lock_version: record1.lock_version }, headers: auth_headers

        expect(response).to have_http_status(:conflict)
        json = JSON.parse(response.body)
        expect(json['error']).to match(/Conflict/)
      end
    end
  end
end
